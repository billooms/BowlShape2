
package com.billooms.view3d;

import com.billooms.outline.api.Outline;
import com.billooms.view3dmodel.Bowl;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.util.Date;
import org.netbeans.spi.print.PrintPage;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.print.PrintProvider;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.lookup.Lookups;

/**
 * Top component for displaying the 3D view of the bowl
 * @author Bill Ooms. Copyright 2011 Studio of Bill Ooms. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
@ConvertAsProperties(dtd = "-//com.billooms.view3d//View3D//EN", 
autostore = false)
@TopComponent.Description(preferredID = "View3DTopComponent",
iconBase = "com/billooms/view3d/view3D.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "view3d", openAtStartup = true)
@ActionID(category = "Window", id = "com.billooms.view3d.View3DTopComponent")
@ActionReference(path = "Menu/Window" , position = 200 )
@TopComponent.OpenActionRegistration(displayName = "#CTL_View3DAction",
preferredID = "View3DTopComponent")
public final class View3DTopComponent extends TopComponent {

	private Outline outline = Lookup.getDefault().lookup(Outline.class);
	private Bowl bowl;
	private DisplayPanel display;

	private PrintProvider printProv;

	public View3DTopComponent() {
		initComponents();
		setName(NbBundle.getMessage(View3DTopComponent.class, "CTL_View3DTopComponent"));
		setToolTipText(NbBundle.getMessage(View3DTopComponent.class, "HINT_View3DTopComponent"));

		bowl = new Bowl();
		display = new DisplayPanel(bowl);
		add(display, BorderLayout.CENTER);

		printProv = new PrintProvider() {	// for printing the outline

			@Override
			public PrintPage[][] getPages(int width, int height, double zoom) {
				PrintPage[][] pp = new PrintPage[1][1];
				pp[0][0] = display;		// one page only
				return pp;
			}

			@Override
			public String getName() {
				return getDisplayName();
			}

			@Override
			public Date lastModified() {
				return new Date();
			}
		};

		this.associateLookup(Lookups.fixed(printProv, bowl, display));
	}

	/**
	 * Save the 3D view to a graphic file
	 * @param file file for saving the graphic view
	 * @param format format (i.e. jpeg, png, etc.)
	 */
	public void saveGraphic(File file, String format) {
        display.writeGraphicFile(file, format);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bottomPanel = new javax.swing.JPanel();
        restoreButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        rotateCombo = new javax.swing.JComboBox();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(restoreButton, org.openide.util.NbBundle.getMessage(View3DTopComponent.class, "View3DTopComponent.restoreButton.text")); // NOI18N
        restoreButton.setToolTipText(org.openide.util.NbBundle.getMessage(View3DTopComponent.class, "View3DTopComponent.restoreButton.toolTipText")); // NOI18N
        restoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreView(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(View3DTopComponent.class, "View3DTopComponent.jLabel2.text")); // NOI18N

        rotateCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "View", "Bowl" }));
        rotateCombo.setToolTipText(org.openide.util.NbBundle.getMessage(View3DTopComponent.class, "View3DTopComponent.rotateCombo.toolTipText")); // NOI18N
        rotateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRotate(evt);
            }
        });

        org.jdesktop.layout.GroupLayout bottomPanelLayout = new org.jdesktop.layout.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, bottomPanelLayout.createSequentialGroup()
                .addContainerGap(214, Short.MAX_VALUE)
                .add(restoreButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(rotateCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(bottomPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(rotateCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel2)
                .add(restoreButton))
        );

        add(bottomPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

	private void restoreView(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreView
		display.restoreView();
}//GEN-LAST:event_restoreView

	private void changeRotate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRotate
		if (rotateCombo.getSelectedIndex() == 0) {
			display.setMouseControlsView();
		} else {
			display.setMouseControlsBowl();
		}
}//GEN-LAST:event_changeRotate

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton restoreButton;
    private javax.swing.JComboBox rotateCombo;
    // End of variables declaration//GEN-END:variables
	@Override
	public void componentOpened() {
		outline.addPropertyChangeListener(bowl);
		bowl.propertyChange(null);		// force a recalculation
	}

	@Override
	public void componentClosed() {
		outline.removePropertyChangeListener(bowl);
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		p.setProperty("grid", String.valueOf(display.isGridShowing()));
		p.setProperty("backgroundColor", String.valueOf(display.getBackgroundColor().getRGB()));
		p.setProperty("bowlColor", String.valueOf(bowl.getColor().getRGB()));
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
		if (p.getProperty("grid", "true").equals("true")) {
			display.showGrid(true);
		} else {
			display.showGrid(false);
		}
		String s = p.getProperty("backgroundColor");
		if (s != null) {
			display.setBackgroundColor(new Color(Integer.parseInt(s)));
		}
		s = p.getProperty("bowlColor");
		if (s != null) {
			bowl.setColor(new Color(Integer.parseInt(s)));
		}
	}
}
